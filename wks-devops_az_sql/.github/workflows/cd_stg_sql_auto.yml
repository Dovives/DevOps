# This is a basic workflow to help you get started with Actions

name: CD_stg_sql_auto_workflow 

# Controls when the action will run. Triggers the workflow on manual request
# and only if the "Dev Workflow" completed successfully
on:
  workflow_dispatch:

    workflow_run:
    workflows: ["CD_dev_sql_auto_workflow"]
    branches: [master]
    types: 
      - completed


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a twos job called "sql-build" & "sql-deploy"
  sql-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    env:
      ENV: stg
      LOCATION: westeurope

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2


      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        shell: bash
        run: |
          echo Loading $ENV $LOCATION $SQL_SA_USER $SQL_SA_PASSWORD variable 
          echo ${{ secrets.SQL_SA_USER }}
          #echo ${{ secrets.SQL_SA_PASSWORD }}
          #echo $SQL_SA_PASSWORD
          #echo $SQL_SA_USER


      - name: Upload a ARM Template Artifact for Version Control
        uses: actions/upload-artifact@v2.1.4
        with:
          # Artifact name
          name: Az_Sql_ARM_Template
          # A file, directory or wildcard pattern that describes what to upload
          path: mssql-db/arm/**.json
          # The desired behavior if no files are found using the provided path. 
          if-no-files-found: error      
      
      - uses: azure/login@v1.1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy Azure Resource Manager (ARM) Template
        uses: Azure/arm-deploy@v1
        with:
          subscriptionId: 1619bfac-1484-4da0-95cc-dec25338e962
          resourceGroupName: wksdevopsql-${{ env.ENV }}-rg
          template: mssql-db/arm/azuredeploy.json
          parameters: 'serverName="wksdevopsql-sql-${{ env.ENV }}" sqlDBName="wksdevopsql-db-${{ env.ENV }}" location="${{ env.LOCATION }}" administratorLogin=${{ secrets.SQL_SA_USER }} administratorLoginPassword=${{ secrets.SQL_SA_PASSWORD }}'
        

  # This workflow contains a twos job called "sql-build" & "sql-deploy"
  # sql-deploy:
  #   runs-on: windows-latest

  #   env:
  #     ENV: stg
  #     LOCATION: westeurope
  #     SQLSERVER: wksdevopsql-sql-stg.database.windows.net

  #   steps:
  #   # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #   - uses: actions/checkout@v2
  #   - uses: azure/login@v1.1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}

  #   - name: Azure SQL Deploy
  #     uses: Azure/sql-action@v1
  #     with:
  #       # Name of the Azure SQL Server name, like Fabrikam.database.windows.net.
  #       server-name: ${{ env.SQLSERVER }}
  #       # The connection string, including authentication information, for the Azure SQL Server database.
  #       connection-string: Server=tcp:${{ env.SQLSERVER }},1433;Initial Catalog=wksdevopsql-Db-${{ env.ENV }};Persist Security Info=False;User ID=dovives;Password=${{ secrets.SQL_SA_PASSWORD }};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;
  #       # Path to DACPAC file. *.dacpac or a folder to deploy
  #       dacpac-package: ./mssql-db/dacpac/wksdevopsqldb-1.0.0.dacpac
  #       # Path to SQL script file. *.sql or a folder to deploy
  #       #sql-file: # optional
  #       # In case DACPAC option is selected, additional SqlPackage.exe arguments that will be applied. When SQL query option is selected, additional sqlcmd.exe arguments will be applied.
  #       #arguments: # optional
